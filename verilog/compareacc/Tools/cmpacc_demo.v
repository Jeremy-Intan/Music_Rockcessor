
//=======================================================
//  This code is generated by Terasic System Builder
//=======================================================

module cmpacc_demo(

	//////////// CLOCK //////////
	input 		          		CLOCK2_50,
	input 		          		CLOCK3_50,
	input 		          		CLOCK4_50,
	input 		          		CLOCK_50,

	//////////// KEY //////////
	input 		     [3:0]		KEY,

	//////////// LED //////////
	output		     [9:0]		LEDR,

	//////////// SW //////////
	input 		     [9:0]		SW
);



//=======================================================
//  REG/WIRE declarations
//=======================================================

wire [1535:0] bitmap;
wire finished;
wire [12:0] res;
wire alustart;
wire colready;
wire rowtopready;
wire rowbotready;
wire finalcolumn;
wire [63:0] columnout;
wire [23:0] toprowout;
wire [23:0] botrowout;
wire nextcol;
wire nextrowbot;
wire nextrowtop;
//=======================================================
//  Structural coding
//=======================================================

assign wren = KEY[0];
assign result = res;
assign LEDR = res[0:9];

bmpreg bitmapreg(.clk(CLOCK_50), .wren(KEY[0]), .bmpin(bitmap), .nextcol(nextcol), .nextrowbot(nextrowbot), .nextrowtop(nextrowtop), .columnout(columnout), .toprowout(toprowout), .botrowout(botrowout), .alustart(alustart), .rowbotready(rowbotready), .rowtopready(rowtopready), .colready(colready), .finalcolumn(finalcolumn));

cmpalu alu(.clk(CLOCK_50), .start(alustart), .bitcolumn(columnout), .bitrowbot(botrowout), .bitrowtop(toprowout), .nextrowtopready(rowtopready), .nextrowbotready(rowbotready), .nextcolumnready(colready), .lastcolumn(finalcolumn), .result(res), .done(done), .nextcolumn(nextcol), .nextrowtop(nextrowtop), .nextrowbot(nextrowbot));


assign bitmap = 
	{
	24'h000000, 
	24'h000000,  
	24'h3ffff0,  
	24'h000000,  
	24'h000000,  
	24'h000000, 
	24'h000000, 
	24'h000000,  
	24'h000000,  
	24'h000000,
	24'h000000, 
	24'h000000, 
	24'h000000, 
	24'h000000,
	24'h000000,
	24'h000000, 
	24'h000000, 
	24'h000000, 
	24'h000000, 
	24'h000000, 
	24'h000000, 
	24'h000000, 
	24'h000000, 
	24'h000000, 
	24'h000000, 
	24'h000000, 
	24'h000000, 
	24'h000000, 
	24'h000000, 
	24'h000000, 
	24'h000000, 
	24'h000000, 
	24'h000000, 
	24'h000000, 
	24'h000000, 
	24'h3f0000, 
	24'h3f0000, 
	24'h3f0000, 
	24'h3f0000, 
	24'h3f0000, 
	24'h3f0000, 
	24'h3f0000, 
	24'h3f0000, 
	24'h3f0000, 
	24'h3f0000, 
	24'h3f0000, 
	24'h3f0000, 
	24'h3f0000, 
	24'h3f0000, 
	24'h3f0000, 
	24'h3f0000, 
	24'h3f0000, 
	24'h3f0000, 
	24'h3f0000, 
	24'h3f0000, 
	24'h3f0000, 
	24'h3f0000, 
	24'h3f0000, 
	24'h3f0000, 
	24'h3f0000, 
	24'h3f0000, 
	24'h000000,
	24'h000000};

endmodule
